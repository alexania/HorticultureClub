---
import BaseLayout from '../layouts/BaseLayout.astro';
import plantsData from '../data/plants.json';
---

<BaseLayout title="Member Login - Horticultural Society">
  <!-- Hero Background Section -->
  <section class="login-hero relative min-h-screen overflow-hidden">
    <!-- Hero Background -->
    <div class="hero-background absolute inset-0">
      <img 
        src={`${import.meta.env.BASE_URL}images/heroes/hero.png`} 
        alt="Victorian Greenhouse - Member Portal" 
        class="hero-image w-full h-full object-cover object-center"
        loading="eager"
      />
      <div class="hero-overlay absolute inset-0 bg-gradient-to-br from-charcoal/80 via-forest-shadow/70 to-moss/80"></div>
    </div>

    <!-- Login Content -->
    <div class="login-content relative z-10 min-h-screen flex flex-col">
      <main class="container mx-auto px-md py-lg flex-1 flex items-center justify-center">
        <div class="w-full max-w-2xl">
          <!-- Page Header -->
          <div class="text-center mb-xl">
            <h1 class="text-5xl font-secondary text-cream mb-md text-shadow-strong">Sacred Portal</h1>
            <p class="text-xl text-autumn max-w-2xl mx-auto leading-relaxed text-shadow italic">
              Enter your mystical credentials to access the sacred archives and member sanctuary.
            </p>
          </div>
    
          <!-- Login Form -->
          <div class="login-card bg-parchment/95 backdrop-blur-sm border border-sepia/50 rounded-lg shadow-2xl p-xl mystical-glow-subtle">
        <form id="loginForm" class="space-y-lg">
          <!-- Initial Selection -->
          <div class="form-group">
            <label for="loginInitial" class="block text-sepia font-secondary mb-sm text-lg">Your Initial:</label>
            <select id="loginInitial" class="w-full p-md border border-sepia rounded-lg bg-cream text-charcoal text-lg" required>
              <option value="">Select your initial</option>
              {Array.from({length: 26}, (_, i) => String.fromCharCode(65 + i)).map(letter => (
                <option value={letter}>{letter}</option>
              ))}
            </select>
          </div>
          
          <!-- Month Selection -->
          <div class="form-group">
            <label for="loginMonth" class="block text-sepia font-secondary mb-sm text-lg">Your Birth Month:</label>
            <select id="loginMonth" class="w-full p-md border border-sepia rounded-lg bg-cream text-charcoal text-lg" required>
              <option value="">Select your birth month</option>
              <option value="January">January</option>
              <option value="February">February</option>
              <option value="March">March</option>
              <option value="April">April</option>
              <option value="May">May</option>
              <option value="June">June</option>
              <option value="July">July</option>
              <option value="August">August</option>
              <option value="September">September</option>
              <option value="October">October</option>
              <option value="November">November</option>
              <option value="December">December</option>
            </select>
          </div>
          
          <!-- Card Selection -->
          <div class="form-group">
            <label for="loginCard" class="block text-sepia font-secondary mb-sm text-lg">Your Botanical Companion:</label>
            <select id="loginCard" class="w-full p-md border border-sepia rounded-lg bg-cream text-charcoal text-lg" required>
              <option value="">Select your botanical companion</option>
              {plantsData
                .slice()
                .sort((a, b) => a.commonName.localeCompare(b.commonName))
                .map(plant => (
                  <option value={plant.commonName}>{plant.commonName} ({plant.name})</option>
                ))}
            </select>
          </div>
          
          <!-- Login Button -->
          <button type="submit" class="btn-login w-full py-lg px-md text-xl font-medium rounded-lg transition-all duration-300 disabled:opacity-50" id="loginButton">
            <span class="button-text">Enter the Sanctuary</span>
            <span class="loading-spinner hidden"></span>
          </button>
          
          <!-- Error Message -->
          <div id="loginError" class="error-message hidden p-md bg-rust/10 border border-rust/30 rounded-lg">
            <p class="text-rust text-center font-medium"></p>
          </div>
          
          <!-- Success Message -->
          <div id="loginSuccess" class="success-message hidden p-md bg-moss/10 border border-moss/30 rounded-lg">
            <p class="text-moss text-center font-medium">Welcome back, fellow cultivator!</p>
          </div>
          </form>
          </div>
          
          <!-- Member Registration Link -->
          <div class="text-center mt-xl">
            <p class="text-autumn mb-md">Not yet a member of our botanical brotherhood?</p>
            <a href={`${import.meta.env.BASE_URL}register/`} class="btn-secondary inline-block py-md px-lg text-lg font-medium rounded-lg transition-all duration-300 no-underline">
              Begin Your Initiation
            </a>
          </div>
        </div>
      </main>
    </div>
  </section>
</BaseLayout>

<script>
  import { loginMember } from '../lib/firebase.js';
  
  class LoginHandler {
    constructor() {
      this.loginForm = document.getElementById('loginForm');
      this.loginButton = document.getElementById('loginButton');
      this.errorElement = document.getElementById('loginError');
      this.successElement = document.getElementById('loginSuccess');
      
      this.initializeEventListeners();
    }
    
    initializeEventListeners() {
      this.loginForm.addEventListener('submit', (e) => this.handleLogin(e));
      
      // Enable/disable login button based on form completion
      const formInputs = this.loginForm.querySelectorAll('select');
      formInputs.forEach(input => {
        input.addEventListener('change', () => this.updateLoginButton());
      });
    }
    
    updateLoginButton() {
      const initial = document.getElementById('loginInitial').value;
      const month = document.getElementById('loginMonth').value;
      const card = document.getElementById('loginCard').value;
      
      const isComplete = initial && month && card;
      this.loginButton.disabled = !isComplete;
    }
    
    async handleLogin(event) {
      event.preventDefault();
      
      const initial = document.getElementById('loginInitial').value;
      const month = document.getElementById('loginMonth').value;
      const plantName = document.getElementById('loginCard').value; // This is the common name
      
      this.setLoading(true);
      this.hideMessages();
      
      try {
        const result = await loginMember(initial, month, plantName);
        
        if (result.success) {
          this.showSuccess();
          
          // Store member data in sessionStorage for the member portal
          sessionStorage.setItem('memberData', JSON.stringify(result.memberData));
          sessionStorage.setItem('isLoggedIn', 'true');
          
          // Redirect to member portal after a short delay
          setTimeout(() => {
            window.location.href = import.meta.env.BASE_URL;
          }, 1500);
        } else {
          throw new Error('Login failed');
        }
      } catch (error) {
        console.error('Login error:', error);
        let errorMessage = 'The botanical spirits could not verify your credentials.';
        
        if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
          errorMessage = 'Invalid credentials. Please check your initial, month, and card combination.';
        } else if (error.code === 'auth/invalid-email') {
          errorMessage = 'Invalid member credentials format.';
        } else if (error.message.includes('Firebase')) {
          errorMessage = 'Authentication service unavailable. Please check Firebase configuration.';
        }
        
        this.showError(errorMessage);
      } finally {
        this.setLoading(false);
      }
    }
    
    setLoading(isLoading) {
      const buttonText = this.loginButton.querySelector('.button-text');
      const loadingSpinner = this.loginButton.querySelector('.loading-spinner');
      
      if (isLoading) {
        buttonText.classList.add('hidden');
        loadingSpinner.classList.remove('hidden');
        this.loginButton.disabled = true;
      } else {
        buttonText.classList.remove('hidden');
        loadingSpinner.classList.add('hidden');
        this.updateLoginButton(); // Re-enable based on form state
      }
    }
    
    showError(message) {
      this.errorElement.classList.remove('hidden');
      this.errorElement.querySelector('p').textContent = message;
      this.successElement.classList.add('hidden');
    }
    
    showSuccess() {
      this.successElement.classList.remove('hidden');
      this.errorElement.classList.add('hidden');
    }
    
    hideMessages() {
      this.errorElement.classList.add('hidden');
      this.successElement.classList.add('hidden');
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new LoginHandler();
  });
</script>

<style>
  .login-hero {
    min-height: 100vh;
  }
  
  .hero-image {
    filter: sepia(20%) saturate(120%) contrast(110%);
  }
  
  .mystical-glow-subtle {
    box-shadow: 0 0 30px rgba(107, 124, 50, 0.3), 0 20px 40px rgba(0, 0, 0, 0.2);
  }
  
  .login-card {
    background: theme('colors.parchment');
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }
  
  .form-group select {
    font-family: theme('fontFamily.body');
    transition: all 0.3s ease;
  }
  
  .form-group select:focus {
    outline: none;
    border-color: theme('colors.moss');
    box-shadow: 0 0 0 3px theme('colors.moss' / 20%);
  }
  
  .btn-login {
    background: linear-gradient(135deg, theme('colors.moss') 0%, theme('colors.forest-shadow') 100%);
    color: theme('colors.cream');
    border: none;
    position: relative;
    overflow: hidden;
  }
  
  .btn-login:hover:not(:disabled) {
    background: linear-gradient(135deg, theme('colors.forest-shadow') 0%, theme('colors.moss') 100%);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  .btn-login:disabled {
    cursor: not-allowed;
    transform: none;
  }
  
  .btn-secondary {
    background: transparent;
    color: theme('colors.sepia');
    border: 2px solid theme('colors.sepia');
    text-decoration: none;
  }
  
  .btn-secondary:hover {
    background: theme('colors.sepia');
    color: theme('colors.parchment');
  }
  
  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid theme('colors.cream' / 30%);
    border-top: 2px solid theme('colors.cream');
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: inline-block;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .error-message {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  .success-message {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .hidden {
    display: none;
  }
  
  .setup-instructions {
    font-family: theme('fontFamily.mono');
  }
  
  .setup-instructions code {
    font-family: inherit;
  }
  
  /* Form validation styles */
  .form-group select:invalid {
    border-color: theme('colors.rust' / 50%);
  }
  
  .form-group select:valid {
    border-color: theme('colors.moss' / 50%);
  }
</style>