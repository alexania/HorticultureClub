---
import { getCollection } from 'astro:content';

// Get latest observations
const observations = await getCollection('observations');
const latestObservations = observations
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0, 3);

// Category icons mapping
const categoryIcons = {
  'propagation': '🌱',
  'terrarium': '🫙',
  'field-study': '🔍',
  'ritual': '🕯️',
  'specimen-care': '🌿',
  'mycology': '🍄',
  'foraging': '🌾'
};

// Success rate colours
const successRateColours = {
  'mystical': 'text-purple-600',
  'exceptional': 'text-green-600', 
  'promising': 'text-blue-600',
  'learning': 'text-yellow-600',
  'experimental': 'text-orange-600'
};
---

<div class="card-header">
  <img src={`${import.meta.env.BASE_URL || '/'}images/navigation/icons/icon_diaries.png`} alt="Member Observations" class="section-icon" />
  <h2 class="text-2xl font-medium text-cream m-0">Member Observations</h2>
</div>

<div class="card-content">
  <p class="text-sepia italic mb-md">Latest discoveries and experiments from our botanical brotherhood</p>
  
  <div class="space-y-md">
    {latestObservations.map((observation) => (
      <article class="observation-entry bg-parchment border border-decorative rounded p-md">
        <div class="observation-header mb-sm">
          <div class="flex items-start justify-between">
            <div>
              <h3 class="mb-xs">
                <a 
                  href={`${import.meta.env.BASE_URL || '/'}observations/${observation.slug}/`}
                  class="text-xl font-medium text-moss hover:text-forest-shadow transition-colors"
                >
                  {observation.data.title}
                </a>
              </h3>
              <div class="flex items-center gap-sm text-sm text-sepia">
                <span class="font-medium">{observation.data.author.name}</span>
                <span class="text-xs uppercase tracking-wide bg-moss text-cream px-2 py-1 rounded-full">
                  {observation.data.author.rank}
                </span>
              </div>
            </div>
            <div class="flex items-center gap-xs">
              <span class="text-2xl">{categoryIcons[observation.data.category]}</span>
              <span class="text-xs text-sepia capitalize">{observation.data.category.replace('-', ' ')}</span>
            </div>
          </div>
        </div>

        <div class="observation-details mb-sm">
          {observation.data.author.specialty && (
            <p class="text-sm text-sepia italic mb-xs">
              Specialty: {observation.data.author.specialty}
            </p>
          )}
          
          {observation.data.plants_mentioned && observation.data.plants_mentioned.length > 0 && (
            <div class="mb-xs">
              <span class="text-sm font-medium text-sepia">Specimens: </span>
              <span class="text-sm italic text-sepia">
                {observation.data.plants_mentioned.slice(0, 2).join(', ')}
                {observation.data.plants_mentioned.length > 2 && ` and ${observation.data.plants_mentioned.length - 2} others`}
              </span>
            </div>
          )}

          <div class="flex flex-wrap gap-sm items-center">
            {observation.data.success_rate && (
              <span class={`text-xs font-medium capitalize ${successRateColours[observation.data.success_rate]}`}>
                {observation.data.success_rate} Results
              </span>
            )}
            
            {observation.data.experimental && (
              <span class="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                Experimental
              </span>
            )}
            
            {observation.data.location && (
              <span class="text-xs text-sepia">
                📍 {observation.data.location}
              </span>
            )}
          </div>
        </div>

        {observation.data.materials && observation.data.materials.length > 0 && (
          <div class="materials mb-sm">
            <div class="text-xs font-medium text-sepia mb-1">Sacred Materials:</div>
            <div class="flex flex-wrap gap-1">
              {observation.data.materials.slice(0, 4).map((material) => (
                <span class="text-xs bg-moss-light text-moss px-2 py-1 rounded">
                  {material}
                </span>
              ))}
              {observation.data.materials.length > 4 && (
                <span class="text-xs text-sepia italic">
                  +{observation.data.materials.length - 4} more
                </span>
              )}
            </div>
          </div>
        )}

        <div class="observation-meta text-xs text-sepia flex justify-between items-center">
          <time datetime={observation.data.date.toISOString()}>
            {observation.data.date.toLocaleDateString('en-GB', { 
              day: 'numeric', 
              month: 'long', 
              year: 'numeric' 
            })}
          </time>
          
          <a 
            href={`${import.meta.env.BASE_URL || '/'}observations/${observation.slug}/`}
            class="text-moss hover:text-forest-shadow transition-colors font-medium"
          >
            Read Full Observation →
          </a>
        </div>
      </article>
    ))}
  </div>

  {observations.length === 0 && (
    <div class="text-center py-lg">
      <p class="text-sepia italic">No observations have been recorded yet. The mysteries await documentation...</p>
    </div>
  )}

  {observations.length > 3 && (
    <div class="text-center mt-md">
      <a 
        href={`${import.meta.env.BASE_URL || '/'}observations/`}
        class="inline-flex items-center text-moss hover:text-forest-shadow transition-colors font-medium"
      >
        View All Member Observations
        <svg class="ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </a>
    </div>
  )}
</div>

<style>
  .moss-light {
    background-color: rgba(139, 164, 139, 0.2);
  }
</style>