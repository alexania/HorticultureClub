---
import type { CollectionEntry } from 'astro:content';
import FeaturedPlant from './FeaturedPlant.astro';

interface Props {
  entry: CollectionEntry<'almanac'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<div class="card-header">
  <img src={`${import.meta.env.BASE_URL || '/'}images/navigation/icons/icon_almanac.png`} alt="Almanac" class="section-icon" />
  <h2 class="text-2xl font-medium text-cream m-0">Seasonal Almanac</h2>
</div>

<div class="card-content">
  <div class="current-week">
    <h3 class="text-3xl text-moss mb-sm font-medium">{entry.data.title}</h3>
    
    {entry.data.moon_phase && (
      <p class="moon-phase bg-parchment border-l-4 border-moss p-sm my-sm italic text-sepia">
        {entry.data.moon_phase} - Time for reflection and growth
      </p>
    )}
    
    <!-- Collapsible Almanac Content -->
    <div class="almanac-container" id="almanac-container">
      <div class="almanac-content" id="almanac-content">
        <Content />
      </div>
      <div class="almanac-overlay" id="almanac-overlay"></div>
      <button class="expand-button" id="expand-button">
        <span class="expand-text">Show More</span>
        <svg class="expand-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>

    <!-- Featured Plant Section with Dynamic Data -->
    {entry.data.featured_plant_image && entry.data.featured_plant_name && (
      <FeaturedPlant 
        name={entry.data.featured_plant_name}
        scientificName={entry.data.featured_plant_scientific}
        image={entry.data.featured_plant_image}
        description={entry.data.featured_plant_description || ""}
        properties={entry.data.featured_plant_properties || []}
      />
    )}
    
    <!-- Tags -->
    {entry.data.tags && (
      <div class="tags mt-md">
        <div class="flex flex-wrap gap-2">
          {entry.data.tags.map(tag => (
            <span class="inline-block bg-moss text-cream px-2 py-1 rounded-full text-xs uppercase tracking-wide">
              {tag}
            </span>
          ))}
        </div>
      </div>
    )}
  </div>
</div>

<style>
  .almanac-container {
    position: relative;
  }

  .almanac-content {
    max-height: 100px;
    overflow: hidden;
    transition: max-height 0.3s ease-in-out;
  }

  .almanac-content.expanded {
    max-height: none;
  }

  .almanac-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 80px;
    background: linear-gradient(to bottom, transparent, var(--color-parchment));
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }

  .almanac-overlay.hidden {
    opacity: 0;
  }

  .expand-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
    margin-top: 1rem;
    padding: 0.75rem 1rem;
    background: var(--color-moss);
    color: var(--color-cream);
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-family: inherit;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .expand-button:hover {
    background: color-mix(in srgb, var(--color-moss) 90%, black);
    transform: translateY(-1px);
  }

  .expand-icon {
    transition: transform 0.3s ease;
  }

  .expand-button.expanded .expand-icon {
    transform: rotate(180deg);
  }

  .expand-button.expanded .expand-text::after {
    content: " Less";
  }

  .expand-button:not(.expanded) .expand-text::after {
    content: "";
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('almanac-container');
    const content = document.getElementById('almanac-content');
    const overlay = document.getElementById('almanac-overlay');
    const button = document.getElementById('expand-button');
    const expandText = button?.querySelector('.expand-text');
    
    if (!container || !content || !overlay || !button || !expandText) return;

    // Check if content needs to be collapsed
    const shouldCollapse = content.scrollHeight > 500;
    
    if (!shouldCollapse) {
      // If content is short enough, hide the button and overlay
      button.style.display = 'none';
      overlay.style.display = 'none';
      content.style.maxHeight = 'none';
      return;
    }

    button.addEventListener('click', function() {
      const isExpanded = content.classList.contains('expanded');
      
      if (isExpanded) {
        // Collapse
        content.classList.remove('expanded');
        overlay.classList.remove('hidden');
        button.classList.remove('expanded');
        expandText.textContent = 'Show More';
        
        // Scroll to top of almanac section
        container.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        // Expand
        content.classList.add('expanded');
        overlay.classList.add('hidden');
        button.classList.add('expanded');
        expandText.textContent = 'Show';
      }
    });
  });
</script>